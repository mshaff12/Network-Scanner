import requests
import json

def check_default_passwords(device):
    # Implement the logic to check for default or weak passwords
    # You can compare the device credentials against a list of known default or weak passwords
    default_passwords = ['admin', 'password', '123456', 'qwerty']
    if device['password'] in default_passwords:
        return True
    return False

def fetch_known_vulnerabilities():
    url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json"
    response = requests.get(url)
    if response.status_code == 200:
        nvd_data = response.json()
        known_vulnerabilities = set()

        for cve_item in nvd_data["CVE_Items"]:
            cve_id = cve_item["cve"]["CVE_data_meta"]["ID"]
            known_vulnerabilities.add(cve_id)

        return known_vulnerabilities
    else:
        print("Failed to fetch NVD data.")
        return None


def check_firmware_vulnerabilities(device):
    known_vulnerabilities = fetch_known_vulnerabilities()

    if known_vulnerabilities is not None:
        firmware_version = device['firmware']
        if firmware_version in known_vulnerabilities:
            return True

    return False

def check_insecure_network_config(device):
    # Implement the logic to check for insecure network configurations
    # You can check for open ports, weak encryption protocols, or insecure communication channels
    # For example, you can check if the device is using HTTP instead of HTTPS
    if device['protocol'] == 'HTTP':
        return True
    return False

def perform_vulnerability_assessment(device):
    # Call the vulnerability assessment checks for the given device
    is_default_password = check_default_passwords(device)
    is_firmware_vulnerable = check_firmware_vulnerabilities(device)
    is_insecure_network_config = check_insecure_network_config(device)

    # Generate a vulnerability assessment report for the device
    report = {
        'device_name': device['name'],
        'vulnerabilities': []
    }

    if is_default_password:
        report['vulnerabilities'].append('Default or weak password')
    if is_firmware_vulnerable:
        report['vulnerabilities'].append('Firmware vulnerability')
    if is_insecure_network_config:
        report['vulnerabilities'].append('Insecure network configuration')

    return report

# Example IoT devices list
iot_devices = [
    {
        'name': 'Device 1',
        'password': 'admin',
        'firmware': 'v1.2.3',
        'protocol': 'HTTP'
    },
    {
        'name': 'Device 2',
        'password': 'password',
        'firmware': 'v2.0.1',
        'protocol': 'HTTPS'
    }
]

# Perform vulnerability assessment for each IoT device
for device in iot_devices:
    assessment_report = perform_vulnerability_assessment(device)
    print(f"Device: {assessment_report['device_name']}")
    print("Vulnerabilities:")
    for vulnerability in assessment_report['vulnerabilities']:
        print(f"- {vulnerability}")
    print("\n")